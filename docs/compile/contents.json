{
    "name": "iOS SDK",
    "text": "<p>The SuperAwesome Mobile SDK (Software Development Kit) lets you to easily add COPPA compliant advertisements and other platform features, like user authentication and registration, to your apps. We try to make integration as easy as possible, so we provide all the necessary tools such as this guide, API documentation, screencasts and demo apps.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/SuperAwesomeLTD/sa-mobile-sdk-ios\">https://github.com/SuperAwesomeLTD/sa-mobile-sdk-ios</a></p>\n<p>If you would like to integrate the SDK as-in, read further.</p>\n<p>If you alraedy have ads in your application through <a href=\"http://www.mopub.com\">MoPub</a>, skip directly to MoPub Integration.</p>\n",
    "sections": [
        {
            "name": "Getting Started",
            "sections": [
                {
                    "name": "Registering Your App on the Dashboard",
                    "text": "<p>If you haven&#39;t registered your app on the SuperAwesome Dashboard yet, you can do that by going to <a href=\"http://dashboard.superawesome.tv\">http://dashboard.superawesome.tv</a> and creating a new app.</p>\n<p><img src=\"img/IMG_01_Dashboard.png\" alt=\"\" title=\"Registering an app on the dashboard\"></p>\n<p>Once your app is registered, you can create placements for it and use the documentation provided below to integrate these placements into your iOS application.</p>\n"
                },
                {
                    "name": "Integrating the SDK",
                    "text": "<p>We use <a href=\"http://cocoapods.org\">CocoaPods</a> in order to make installing and updating our SDK super easy. CocoaPods manages library dependencies for your Xcode projects.</p>\n<h3 id=\"installing-cocoapods\">Installing CocoaPods</h3>\n<p>If you don&#39;t have CocoaPods installed on your machine you can install it by using the following command in the comamnd line:</p>\n<pre><code>sudo gem install cocoapods\n</code></pre><p>After that you need to go to the project&#39;s directory and initialize CocoaPods</p>\n<pre><code>cd /project_root\npod init\n</code></pre><h3 id=\"getting-the-sdk\">Getting the SDK</h3>\n<p>The dependencies for your projects are specified in a single text file called a Podfile. CocoaPods will resolve dependencies between libraries, fetch the resulting source code, then link it together in an Xcode workspace to build your project.\nTo download the latest release of the SDK the following line to your Podfile:</p>\n<pre><code>pod &#39;SuperAwesome&#39;, :git =&gt; &#39;https://github.com/SuperAwesomeLTD/sa-mobile-sdk-ios.git&#39;, :branch =&gt; &#39;develop_v3&#39;\n</code></pre><p>After the pod source has been added, update your project&#39;s dependencies by running the following command in the terminal:</p>\n<pre><code>pod update\n</code></pre><p>Don&#39;t forget to use the .xcworkspace file to open your project in Xcode, instead of the .xcproj file, from here on out.</p>\n"
                }
            ]
        },
        {
            "name": "Banner Ads",
            "sections": [
                {
                    "name": "Banner Ads With Interface Builder",
                    "text": "<p>To add a banner ad to your project using InterfaceBuilder, there are a couple of easy steps that you should follow.\nFirst, add a new UIView to your View Controller or view. Then, in the Identity Inspector, change it&#39;s class from UIView to SABannerAd.</p>\n<p><img src=\"img/IMG_02_SABannerAd_1.png\" alt=\"\" title=\"Setting custom class to UIView\"></p>\n<p>In the Size Inspector make sure to set the Ad&#39;s size to the one you specified in the Dashboard. If not, the SABannerAd will try to scale the ad but also maintain aspect ratio, so that it does not get distorted.</p>\n<p>Finally, in the Attributes Inspector, there are several ad specific attributes that you need to configure.</p>\n<p><img src=\"img/IMG_03_SABannerAd_2.png\" alt=\"\" title=\"Setting attributes\"></p>\n<ul>\n<li>You must set the Placement Id to the one you created in the Dashboard.</li>\n<li>Select to turn Parntal Gate On or Off (more on that in the Parental Gate chapter).</li>\n<li>Select a Refresh Period for the Ad</li>\n<li>And select Play Instantly to be On (it&#39;s usually by default).</li>\n</ul>\n"
                },
                {
                    "name": "Banner Ads With Code",
                    "text": "<p>If you prefer using code in order to add banners to your app, you can use the following code snippet to do so:</p>\n<p>At the top of your View Controller&#39;s header or source file, add the following import statement:</p>\n<pre><code>#import &quot;SuperAwesome.h&quot;\n</code></pre><p>Then in your <code>viewDidLoad</code> function or similar, add the following code:</p>\n<pre><code>SABannerAd *ad = [[SABannerAd alloc] initWithPlacementId:5687  andFrame:CGRectMake(0, 0, 320, 50)];\n[self.view addSubview:ad];\n[ad playInstant];\n</code></pre><p>Do not forget to replace the <code>5687</code> test placement Id with one of your own placement ID, from the Dashboard.</p>\n"
                }
            ]
        },
        {
            "name": "Video Ads",
            "sections": [
                {
                    "name": "Video Ads With Interface Builder",
                    "text": "<p>In order to use video ads in your app, first you have to add a preroll placement on the <a href=\"http://dashboard.superawesome.tv\">Dashboard</a>. Then, go to your xib file and add a UIView object to the view. In the Identity Inspector pane set the class of the view to SAVideoAd.</p>\n<p><img src=\"img/IMG_04_SAVideoAd_1.png\" alt=\"\" title=\"Adding Video Ad in Interface Builder\"></p>\n<p>Unlike Banner Ads, you can set the Video Ads size to whatever size you like in the Size Inspector, and it will scale properly, respecting video aspect ratio.</p>\n<p>Finally, in the Attributes Inspector, you will find the same ad specific attributes that you need to configure.</p>\n<p><img src=\"img/IMG_05_SAVideoAd_2.png\" alt=\"\" title=\"Setting attributes to video\"></p>\n<ul>\n<li>You must set the Placement Id to the one you created in the Dashboard.</li>\n<li>Select to turn Parntal Gate On or Off (more on that in the Parental Gate chapter).</li>\n<li>Refresh Period has no effect on video ads</li>\n<li>And select Play Instantly to be On (it&#39;s usually by default).</li>\n</ul>\n"
                },
                {
                    "name": "Video Ads With Code",
                    "text": "<p>If you prefer using code in order to add video ads to your app, you can use the following code snippet to do so:</p>\n<pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view from its nib.\n\n    SAVideoAd *vad = [[SAVideoAd alloc] initWithPlacementId:5740 andFrame:CGRectMake(0, 0, 320, 300)];\n    [self.view  addSubview:vad];\n    [vad playInstant];\n}\n</code></pre><p>Do not forget to replace the <code>5740</code> with your placement ID.</p>\n"
                }
            ]
        },
        {
            "name": "Interstitial Ads",
            "text": "<p>Interstitial ads are usually presented modally over your current View Controller. The Super Awesome SDK implements them using the SAInterstitialAd class, which is a subclass of UIViewController.</p>\n<p>The usual code you will use will look like the following:</p>\n<pre><code>// alloc + init the interstitial\nSAInterstitialAd *iad = [[SAInterstitialAd alloc] initWithPlacementId:5692];\n\n// use your View Controllers standard presentViewController:animated:completion\n// function to load the interstitial\n// on completion, make sure to call the playInstant function to actually show\n// the ad\n[self presentViewController:iad animated:YES completion:^{\n    [iad playInstant];\n}];\n</code></pre><p>Do not forget to replace the <code>5692</code> string with your placement ID.</p>\n"
        },
        {
            "name": "Fullscreen Video Ads",
            "text": "<p>Fullscreen video ads are similar to Interstitials. To set it up in your project, simply use:</p>\n<pre><code>SAFullscreenVideoAd *fvad = [[SAFullscreenVideoAd alloc] initWithPlacementId:5740];\n[self presentViewController:fvad animated:YES completion:^{\n    [fvad playInstant];\n}];\n</code></pre>"
        },
        {
            "name": "Preloading Ads",
            "text": "<p>The Super Awesome SDK supports preloading of ads. This means that you can load most of the Ad data beforehand and display the ad when it&#39;s convenient.</p>\n<p>To be able to preload ads though, you will need to do some setup.</p>\n<h3 id=\"implementing-the-sa-loader-protocol\">Implementing the SA Loader Protocol</h3>\n<p>The first step is to declare our <code>ViewController</code> or <code>View</code>  class as implementing the <code>SALoaderProtocol</code>, which is a custom SuperAwesome protocol:</p>\n<pre><code>@interface MyViewController () &lt;SALoaderProtocol&gt;\n.......\n@end\n</code></pre><p>The <code>SALoaderProtocol</code> defines two optional methods that any class can implement. Therefore, add the following code to your view controller&#39;s source file:</p>\n<pre><code>- (void) didPreloadAd:(SAAd *)ad forPlacementId:(NSInteger)placementId {\n    // empty implementation so far\n}\n\n- (void) didFailToPreloadAdForPlacementId:(NSInteger)placementId {\n    // empty implementation so far\n}\n</code></pre><h3 id=\"preloading-ads\">Preloading ads</h3>\n<p>Once that is done, you need to do some setup:</p>\n<pre><code>\n@interface MyViewController () &lt;SALoaderProtocol&gt;\n\n// declare the Banner Ad as a private property, to be available to all\n// functions\n@property (nonatomic, strong) SABannerAd *ad;\n\n@end\n\n\n@implementation MyViewController\n\n- (void)viewDidLoad {\n    // call to super\n    [super viewDidLoad];\n\n    // call the SALoader Singleton to do two things:\n    // 1. set your MyViewController class as the delegate that implements the SALoaderProtocol \n    [[SALoader sharedManager] setDelegate:self];\n\n    // 2. preload the ad data for a certain placement\n    [[SALoader sharedManager] preloadAdForPlacementId:5687];\n\n\n    // Lastly, don&#39;t forget to alloc+init the banner ad, but use\n    // the initWithFrame: init function;\n    //\n    // if you use initWithPlacementId:andFrame: the placementId you specify will\n    // be ignored\n    _ad = [[SABannerAd alloc] initWithFrame:CGRectMake(0, 0, 320, 50)];\n}\n</code></pre><p>Finally, we will use the two functions we just implemented, part of SALoaderProtocol, to see when an ad\nhas been loaded and act on it.</p>\n<pre><code>- (void) didPreloadAd:(SAAd *)ad forPlacementId:(NSInteger)placementId {\n\n    // check to see if the right placement was loaded\n    if (placementId == 5687) {    \n        // use the special setAd: function of each SuperAwesome Ad object to assign the\n        // loaded Ad\n        [_ad setAd:ad];\n\n        // use the playPreloaded function to display the ad; This function assumes\n        // that bannerad has a valid add assigned\n        [_ad playPreloaded];\n\n        // and add the banner ad as a child to the current scene\n        [self.view addSubview:_ad];\n    }\n}\n</code></pre><p>These steps apply equally to all types of ads.</p>\n"
        },
        {
            "name": "Parental Gate",
            "text": "<p>Parental gates are used in apps targeted towards kids to prevent them from engaging in commerce or following links out of an app to websites, social networks, or other apps without the knowledge of their parent or guardian. A parental gate presents an adult level task which must be completed in order to continue.</p>\n<p>You can enable our parental gate on banners, interstitials and video views. You can either enable it in Interface Builder or by using the following code in your project:</p>\n<pre><code>[_ad setParentalGateEnabled:YES];\n</code></pre><p><img src=\"img/IMG_06_ParentalGate.png\" alt=\"\" title=\"Parental Gate on iOS\"></p>\n"
        },
        {
            "name": "Ad Lifecycle Events",
            "sections": [
                {
                    "name": "Common Events",
                    "text": "<p>Using the same delegate pattern all ads can serve additional events than can be caught and acted upon.</p>\n<p>To do this, your <code>ViewController</code> or <code>View</code> class must also implement the <code>SAAdProtocol</code>:</p>\n<pre><code>@interface MyViewController () &lt;SAAdProtocol&gt; {\n    ....\n}\n</code></pre><p>This protocol defines a series of optional functions you can implement and catch events:</p>\n<pre><code>\n// this function is called when the ad is shown on the screen\n- (void) adWasShown:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when the ad failed to show\n- (void) adFailedToShow:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when an ad is closed;\n// only applies to fullscreen ads like interstitials and fullscreen videos\n- (void) adWasClosed:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when an ad is clicked\n- (void) adFollowedURL:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when a parental gate pop-up &quot;cancel&quot; button is pressed\n- (void)parentalGateWasCanceled:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when a parental gate pop-up &quot;continue&quot; button is\n// pressed and the parental gate failed (because the numbers weren&#39;t OK)\n- (void)parentalGateWasFailed:(NSInteger)placementId {\n    // implement here\n}\n\n// this function is called when a parental gate pop-up &quot;continue&quot; button is\n// pressed and the parental gate succedded\n- (void)parentalGateWasSucceded:(NSInteger)placementId {\n    // implement here\n}\n</code></pre><p>Finally, to complete the code, all ads must assign their <code>delegate</code> object to <code>MyViewController</code>. This means that when an ad launches an adWasShown or adWasClosed event, the controller will respond with the functions implemented above.</p>\n<pre><code>\n_ad = [[SABannerAd alloc] initWithFrame:CGRectMake(0, 0, 320, 50)];\n_ad.delegate = self; // where &quot;self&quot; is the view controller\n</code></pre>"
                },
                {
                    "name": "Video Events",
                    "text": "<p>Additionally, if your <code>ViewController</code> class implements functions from the <code>SAVideoAdProtocol</code>, you can catch events like video start or end.</p>\n<p>As usual, you need to change your <code>ViewController</code> class:</p>\n<pre><code>@interface MyViewController () &lt;SAVideoAdProtocol&gt; \n\n    // fired when a video ad has started\n    - (void) videoStarted:(NSInteger)placementId {\n        // implement here\n    }\n\n    // fired when a video ad has reached 1/4 of total duration\n    - (void) videoReachedFirstQuartile:(NSInteger)placementId {\n        // implement here\n    }\n\n    // fired when a video ad has reached 1/2 of total duration\n    - (void) videoReachedMidpoint:(NSInteger)placementId {\n        // implement here\n    }\n\n    // fired when a video ad has reached 3/4 of total duration\n    - (void) videoReachedThirdQuartile:(NSInteger)placementId {\n        // implement here\n    }\n\n    // fired when a video ad has ended\n    - (void) videoEnded:(NSInteger)placementId {\n        // implement here\n    }\n\n    // fired when a video is skipped\n    - (void) videoSkipped:(NSInteger)placementId {\n        // implement here\n    }\n</code></pre><p>And just as before, any Video Ads in your app must set their <code>videoDelegate</code> object to <code>MyViewController</code>, as class that implements the SAVideoAdProtocol interface.</p>\n<pre><code>\n_vad = [[SAVideoAd alloc] initWithFrame:CGRectMake(0, 0, 320, 300)];\n_vad.videoDelegate = self; // where &quot;self&quot; is the view controller\n</code></pre>"
                }
            ]
        },
        {
            "name": "MoPub Integration",
            "text": "<p>If you already have MoPub ads serving in your app, but want to integrate SuperAwesome as well, without having to directly use the AwesomeAds SDK, you can follow the steps below:</p>\n<h4 id=\"integrate-the-sdk\">Integrate the SDK</h4>\n<p>The first thing you should do is integrate the SDK in your current app by following the instructions in <a href=\"https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Integrating%20the%20SDK?version=3\">Getting Started / Integrating the SDK</a>.</p>\n<p>This will add the SDK to your current project. </p>\n<h4 id=\"download-adapters\">Download Adapters</h4>\n<p>Next, you&#39;ll need to download a list of files called Adapters:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/develop_v3/SuperAwesome/MoPubIntegration/SuperAwesomeBannerCustomEvent.h\">SuperAwesomeBannerCustomEvent.h</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/develop_v3/SuperAwesome/MoPubIntegration/SuperAwesomeBannerCustomEvent.m\">SuperAwesomeBannerCustomEvent.m</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/develop_v3/SuperAwesome/MoPubIntegration/SuperAwesomeInterstitialCustomEvent.h\">SuperAwesomeInterstitialCustomEvent.h</a></li>\n<li><a href=\"https://raw.githubusercontent.com/SuperAwesomeLTD/sa-mobile-sdk-ios/develop_v3/SuperAwesome/MoPubIntegration/SuperAwesomeInterstitialCustomEvent.m\">SuperAwesomeInterstitialCustomEvent.m</a></li>\n</ul>\n<p>These will act as a convenient bridge between SuperAwesome and MoPub, so that you don&#39;t have to write any aditional line of code.</p>\n<h4 id=\"setup-a-mopub-custom-network\">Setup a MoPub Custom Network</h4>\n<p>From your MoPub admin interface you should create a <code>New Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_1.png\" alt=\"\" title=\"Adding a new Network\"></p>\n<p>Form the next menu, select <code>Custom Native Network</code></p>\n<p><img src=\"img/IMG_07_MoPub_2.png\" alt=\"\" title=\"Creating a Custom Native Network\"></p>\n<p>You&#39;ll be taken to a new page. Here select the title of the new network</p>\n<p><img src=\"img/IMG_07_MoPub_3.png\" alt=\"\" title=\"Create the Super Awesome Network\"></p>\n<p>And assign custom inventory details for Banner and Interstitial ads:</p>\n<p><img src=\"img/IMG_07_MoPub_4.png\" alt=\"\" title=\"Setup custom inventory\"></p>\n<p>Custom Event Class is:</p>\n<ul>\n<li>for Banner Ads: <code>SuperAwesomeBannerCustomEvent</code></li>\n<li>for Interstitial Ads: <code>SuperAwesomeInterstitialCustomEvent</code></li>\n</ul>\n<p>Notice these are identical to the names of the four files you downloaded in step one.</p>\n<p>Custom Event Data is always required, and must be given in the form of  JSON:</p>\n<pre><code>{\n    &quot;placementId&quot;: 5692,\n    &quot;testMode&quot;: true,\n    &quot;parentalGateEnabled&quot;: true\n}\n</code></pre><p>If you don&#39;t yet have a Placement ID for Awesome Ads, check out the <a href=\"https://developers.superawesome.tv/docs/iossdk/Getting%20Started/Registering%20Your%20App%20on%20the%20Dashboard?version=3\">Getting Started / Registering Your App on the Dashboard</a> section.</p>\n"
        },
        {
            "name": "Testing Placements",
            "text": "<p>Our SDK has a test mode flag that if set, causes your placements to display our demo ads. This way you can easily test the production and the development version of your app separately. To enable test mode call the following method:</p>\n<pre><code>[[SuperAwesome sharedManager] enableTestMode];\n</code></pre><p>We also provide some demo placements that can be used for testing. These placements have a 100% fill rate.</p>\n<table>\n<thead>\n<tr>\n<th>Placement ID</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5687</td>\n<td>320x50 banner</td>\n</tr>\n<tr>\n<td>5692</td>\n<td>320x480 interstitial</td>\n</tr>\n<tr>\n<td>5740</td>\n<td>video</td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
            "name": "Technical Support",
            "text": "<p>If you have any questions or you need technical support, please, do not hesitate to contact us at <a href=\"mailto:devsupport@superawesome.tv\">devsupport@superawesome.tv</a>. We will make every attempt to answer your inquiry as quickly as possible.</p>\n"
        },
        {
            "name": "License",
            "text": "<p>See the LICENSE.txt file for more information.</p>\n"
        }
    ]
}